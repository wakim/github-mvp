apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'testfairy'

def final appId = "br.com.github.sample"

def circleBuild = System.getenv("CI") == "true"
def final preDexEnabled = "true".equals(System.getProperty("pre-dex", "true")) && !circleBuild
def final dexInProcessEnabled = "true".equals(System.getProperty("dex-in-process", "true")) && !circleBuild
def final testFairyKey = System.getenv("testfairykey")

def final appConfig = [
        "id": appId,

        "versions": [
                "kotlin": "$kotlin_version",
                "paper_parcel": "1.0.0",
                "support_library": "24.2.0",
                "leak_canary": "1.4-beta2",
                "dagger": "2.6",
                "stetho": "1.3.1",
                "retrofit": "2.1.0",
                "okhttp": "3.4.1",

                "junit": "4.12",
                "hamcrest": "1.3",
                "mockito": "1.+",
                "runner": "0.5",
                "espresso": "2.2.2",
                "dexmaker": "1.2",
                "roboeletric": "3.1.1"
        ],

        production: [
                "use_log": "false",
                "api_url": "\"https://api.github.com\"",
                "manifest_placeholders": [
                        "app_id": appId
                ]
        ],

        staging: [
                "use_log": "true",
                "api_url": "\"https://api.github.com\"",
                "manifest_placeholders": [
                        "app_id": appId
                ]
        ],

        development: [
                "use_log": "true",
                "api_url": "\"https://api.github.com\"",
                "manifest_placeholders": [
                        "app_id": appId
                ]
        ]
]

def generateVersionCode() {
    try {
        def cmd = 'git rev-list --count HEAD'
        cmd.execute().text.trim().toInteger()
    } catch (ignored) {
        1
    }
}

def generateVersionName() {
    try {
        def cmd = 'git describe --tags --abbrev=0'
        def name = cmd.execute().text.trim()

        if (name.isEmpty()) {
            return "0.0"
        }
    } catch (ignored) {
        "0.0"
    }
}

android {
    compileSdkVersion 24
    buildToolsVersion "24.0.1"

    defaultConfig {
        applicationId "$appConfig.id"
        minSdkVersion 16
        targetSdkVersion 24
        versionCode 1
        versionName "0.0.0"

        resConfigs "en", "pt-rBR"

        testInstrumentationRunner 'br.com.github.sample.MockTestRunner'
    }

    lintOptions {
        disable 'MissingTranslation'
    }

    dexOptions {
        javaMaxHeapSize "2g"
        preDexLibraries preDexEnabled
        dexInProcess = dexInProcessEnabled
    }

//    signingConfigs {
//        release {
//            storeFile file("xyz.jks")
//            storePassword "xyz"
//            keyAlias "xyz"
//            keyPassword "xyz"
//        }
//    }

    testfairyConfig {
        apiKey "$testFairyKey"
        metrics "cpu,memory,network,logcat"
        video "wifi"
        videoRate "0.5"
        videoQuality "low"
        maxDuration "15m"
        recordOnBackground true
        iconWatermark false
        notify false
        maxDuration "1h"
        autoUpdate true
        uploadProguardMapping true
    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true

//            signingConfig signingConfigs.release

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        debug {
//            signingConfig signingConfigs.release
        }
    }

    productFlavors {
        def BOOLEAN = "boolean"
        def STRING = "String"

        def USE_LOG = "USE_LOG"
        def API_URL = "API_URL"

        production {
            buildConfigField BOOLEAN, USE_LOG, "$appConfig.production.use_log"
            buildConfigField STRING, API_URL, "$appConfig.production.api_url"

            manifestPlaceholders = appConfig.production.manifest_placeholders
        }

        staging {
            buildConfigField BOOLEAN, USE_LOG, "$appConfig.staging.use_log"
            buildConfigField STRING, API_URL, "$appConfig.staging.api_url"

            manifestPlaceholders = appConfig.staging.manifest_placeholders
        }

        development {
            buildConfigField BOOLEAN, USE_LOG, "$appConfig.development.use_log"
            buildConfigField STRING, API_URL, "$appConfig.development.api_url"

            manifestPlaceholders = appConfig.development.manifest_placeholders
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        debug.java.srcDirs += 'src/debug/kotlin'
        androidTest.java.srcDirs += ['src/androidTest/kotlin', 'src/commonsTest/kotlin']
        test.java.srcDirs += ['src/test/kotlin', 'src/commonsTest/kotlin']
    }
}

android.applicationVariants.all { variant ->
    def mergedFlavor = variant.mergedFlavor

    if (!variant.buildType.isDebuggable()) {
        mergedFlavor.versionCode = generateVersionCode()
        mergedFlavor.versionName = generateVersionName() + "." + generateVersionCode()
    }
}

repositories {
    maven { url 'https://jitpack.io' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile "org.jetbrains.kotlin:kotlin-stdlib:$appConfig.versions.kotlin"

    compile "com.android.support:appcompat-v7:$appConfig.versions.support_library"
    compile "com.android.support:design:$appConfig.versions.support_library"
    compile "com.android.support:cardview-v7:$appConfig.versions.support_library"
    compile "com.android.support:recyclerview-v7:$appConfig.versions.support_library"

    compile "com.google.dagger:dagger:$appConfig.versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$appConfig.versions.dagger"

    compile 'com.jakewharton:kotterknife:0.1.0-SNAPSHOT'

    compile "com.squareup.retrofit2:retrofit:$appConfig.versions.retrofit"
    compile "com.squareup.retrofit2:converter-gson:$appConfig.versions.retrofit"
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0-RC1'

    compile "com.squareup.okhttp3:okhttp:$appConfig.versions.okhttp"
    compile "com.squareup.okhttp3:logging-interceptor:$appConfig.versions.okhttp"

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:1.4.0@aar'

    provided 'org.glassfish:javax.annotation:10.0-b28'

    compile "com.github.grandstaish.paperparcel:paperparcel:$appConfig.versions.paper_parcel"
    compile "com.github.grandstaish.paperparcel:paperparcel-kotlin:$appConfig.versions.paper_parcel"

    kapt "com.github.grandstaish.paperparcel:compiler:$appConfig.versions.paper_parcel"

    compile 'io.reactivex.rxjava2:rxandroid:2.0.0-RC1'
    compile 'io.reactivex.rxjava2:rxjava:2.0.0-RC1'

    compile 'uk.co.chrisjenx:calligraphy:2.2.0'
    compile 'de.hdodenhof:circleimageview:2.1.0'

    debugCompile "com.facebook.stetho:stetho:$appConfig.versions.stetho"
    debugCompile "com.facebook.stetho:stetho-okhttp3:$appConfig.versions.stetho"

    debugCompile "com.squareup.leakcanary:leakcanary-android:$appConfig.versions.leak_canary"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$appConfig.versions.leak_canary"


    testCompile "junit:junit:$appConfig.versions.junit"
    testCompile "org.mockito:mockito-all:$appConfig.versions.mockito"
    testCompile "org.hamcrest:hamcrest-all:$appConfig.versions.hamcrest"

    androidTestCompile ("com.android.support.test:runner:$appConfig.versions.runner") {
        exclude module: "support-annotations"
    }
    androidTestCompile ("com.android.support.test:rules:$appConfig.versions.runner") {
        exclude module: "support-annotations"
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-core:$appConfig.versions.espresso") {
        exclude module: "support-annotations"
    }
    androidTestCompile ("com.android.support.test.espresso:espresso-intents:$appConfig.versions.espresso") {
        exclude module: "support-annotations"
    }
    androidTestCompile("com.android.support.test.espresso:espresso-contrib:$appConfig.versions.espresso") {
        exclude group: 'com.android.support'
    }
    androidTestCompile "org.mockito:mockito-core:$appConfig.versions.mockito"
    kaptAndroidTest "com.google.dagger:dagger-compiler:$appConfig.versions.dagger"

    androidTestCompile "com.google.dexmaker:dexmaker:$appConfig.versions.dexmaker"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:$appConfig.versions.dexmaker"
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha7'
}

task grantAnimationPermission(type: Exec, dependsOn: 'installDevelopmentDebug') {
    commandLine "./adb_all.sh shell pm grant $appConfig.id android.permission.SET_ANIMATION_SCALE".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connected')) {
        task.dependsOn grantAnimationPermission
    }
}

kapt {
    generateStubs = true
}